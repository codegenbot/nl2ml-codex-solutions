
def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
    # TODO: Complete the following code given the task description and function signature.
    # Hint: You may find the following functions useful:
    #       1. is_even(n)
    #       2. is_odd(n)
    #       3. sort(lst)
    #       4. append(lst, item)
    #       5. remove(lst, item)
    #       6. insert(lst, index, item)
    #       7. pop(lst, index)
    #       8. index(lst, item)
    #       9. count(lst, item)
    #       10. reverse(lst)
    #       11. extend(lst1, lst2)
    #       12. copy(lst)
    #       13. clear(lst)
    #       14. len(lst)
    #       15. sum(lst)
    #       16. min(lst)
    #       17. max(lst)
    #       18. mean(lst)
    #       19. median(lst)
    #       20. mode(lst)
    #       21. std(lst)
    #       22. var(lst)
    #       23. range(lst)
    #       24. percentile(lst, p)
    #       25. quartile(lst, q)
    #       26. interquartile_range(lst)
    #       27. zscore(lst, x)
    #       28. normalize(lst)
    #       29. standardize(lst)
    #       30. shuffle(lst)
    #       31. sample(lst, n)
    #       32. unique(lst)
    #       33. count_unique(lst)
    #       34. frequency_table(lst)
    #       35. frequency_distribution(lst)
    #       36. frequency_polygon(lst)
    #       37. histogram(lst)
    #       38. stem_and_leaf(lst)
    #       39. box_and_whisker(lst)
    #       40. scatter_plot(lst1, lst2)
    #       41. line_plot(lst)
    #       42. bar_chart(lst)
    #       43. pie_chart(lst)
    #       44. frequency_histogram(lst)
    #       45. cumulative_frequency_histogram(lst)
    #       46. cumulative_frequency_polygon(lst)
    #       47. ogive(lst)
    #       48. stem_and_leaf_plot(lst)
    #       49. cumulative_frequency_ogive(lst)
    #       50. frequency_table_relative(lst)
    #       51. frequency_table_cumulative(lst)
    #       52. frequency_table_cumulative_relative(lst)
    #       53. frequency_distribution_relative(lst)
    #       54. frequency_distribution_cumulative(lst)
    #       55. frequency_distribution_cumulative_relative(lst)
    #       56. frequency_polygon_relative(lst)
    #       57. frequency_polygon_cumulative(lst)
    #       58. frequency_polygon_cumulative_relative(lst)
    #       59. histogram_relative(lst)
    #       60. histogram_cumulative(lst)
    #       61. histogram_cumulative_relative(lst)
    #       62. frequency_histogram_relative(lst)
    #       63. frequency_histogram_cumulative(lst)
    #       64. frequency_histogram_cumulative_relative(lst)
    #       65. cumulative_frequency_histogram_relative(lst)
    #       66. cumulative_frequency_histogram_cumulative(lst)
    #       67. cumulative_frequency_histogram_cumulative_relative(lst)
    #       68. cumulative_frequency_polygon_relative(lst)
    #       69. cumulative_frequency_polygon_cumulative(lst)
    #       70. cumulative_frequency_polygon_cumulative_relative(lst)
    #       71. ogive_relative(lst)
    #       72. ogive_cumulative(lst)
    #       73. ogive_cumulative_relative(lst)
    #       74. stem_and_leaf_plot_relative(lst)
    #       75. stem_and_leaf_plot_cumulative(lst)
    #       76. stem_and_leaf_plot_cumulative_relative(lst)
    #       77. cumulative_frequency_ogive_relative(lst)
    #       78. cumulative_frequency_ogive_cumulative(lst)
    #       79. cumulative_frequency_ogive_cumulative_relative(lst)
    #       80. box_and_whisker_relative(lst)
    #       81. box_and_whisker_cumulative(lst)
    #       82. box_and_whisker_cumulative_relative(lst)
    #       83. scatter_plot_relative(lst1, lst2)
    #       84. scatter_plot_cumulative(lst1, lst2)
    #       85. scatter_plot_cumulative_relative(lst1, lst2)
    #       86. line_plot_relative(lst)
    #       87. line_plot_cumulative(lst)
    #       88. line_plot_cumulative_relative(lst)
    #       89. bar_chart_relative(lst)
    #       90. bar_chart_cumulative(lst)
    #       91. bar_chart_cumulative_relative(lst)
    #       92. pie_chart_relative(lst)
    #       93. pie_chart_cumulative(lst)
    #       94. pie_chart_cumulative_relative(lst)
    #       95. correlation(lst1, lst2)
    #       96. covariance(lst1, lst2)
    #       97. regression(lst1, lst2)
    #       98. residual(lst1, lst2)
    #       99. residual_plot(lst1, lst2)
    #       100. residual_histogram(lst1, lst2)
    #       101. residual_frequency_polygon(lst1, lst2)
    #       102. residual_histogram_relative(lst1, lst2)
    #       103. residual_histogram_cumulative(lst1, lst2)
    #       104. residual_histogram_cumulative_relative(lst1, lst2)
    #       105. residual_frequency_polygon_relative(lst1, lst2)
    #       106. residual_frequency_polygon_cumulative(lst1, lst2)
    #       107. residual_frequency_polygon_cumulative_relative(lst1, lst2)
    #       108. residual_frequency_histogram_relative(lst1, lst2)
    #       109. residual_frequency_histogram_cumulative(lst1, lst2)
    #       110. residual_frequency_histogram_cumulative_relative(lst1, lst2)
    #       111. residual_cumulative_frequency_histogram_relative(lst1, lst2)
    #       112. residual_cumulative_frequency_histogram_cumulative(lst1, lst2)
    #       113. residual_cumulative_frequency_histogram_cumulative_relative(lst1, lst2)
    #       114. residual_cumulative_frequency_polygon_relative(lst1, lst2)
    #       115. residual_cum
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """
