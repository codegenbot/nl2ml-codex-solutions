
def cycpattern_check(a , b):
    """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check("abcd","abd") => False
    cycpattern_check("hello","ell") => True
    cycpattern_check("whassup","psus") => False
    cycpattern_check("abab","baa") => True
    cycpattern_check("efef","eeff") => False
    cycpattern_check("himenss","simen") => True

    if a in b:
        return True
    else:
        return False


def check(func):
    assert func("abcd", "abd") == False, "test #1"
    assert func("hello", "ell") == True, "test #2"
    assert func("whassup", "psus") == False, "test #3"
    assert func("abab", "baa") == True, "test #4"
    assert func("winemtt", "tinem") == True, "test #5"
    assert func("efef", "eeff") == False, "test #6"
    assert func("himenss", "simen") == True, "test #7"
    assert func("", "") == True, "test #8"
    assert func("", "a") == False, "test #9"
    assert func("a", "") == False, "test #10"
    assert func("abc", "abc") == True, "test #11"
    assert func("abc", "cba") == True, "test #12"
    assert func("abc", "bca") == True, "test #13"
    assert func("abc", "acb") == True, "test #14"
    assert func("abc", "cab") == True, "test #15"
    assert func("abc", "bac") == True, "test #16"
    assert func("abc", "ab") == True, "test #17"
    assert func("abc", "bc") == True, "test #18"
    assert func("abc", "ac") == True, "test #19"
    assert func("abc", "cb") == True, "test #20"
    assert func("abc", "ca") == True, "test #21"
    assert func("abc", "ba") == True, "test #22"
    assert func("abc", "a") == True, "test #23"
    assert func("abc", "b") == True, "test #24"
    assert func("abc", "c") == True, "test #25"
    assert func("abc", "abcd") == False, "test #26"
    assert func("abc", "bacd") == False, "test #27"
    assert func("abc", "abdc") == False, "test #28"
    assert func("abc", "abcc") == False, "test #29"
    assert func("abc", "bcc") == False, "test #30"
    assert func("abc", "acc") == False, "test #31"
    assert func("abc", "accc") == False, "test #32"
    assert func("abc", "bccc") == False, "test #33"
    assert func("abc", "cccc") == False, "test #34"
    assert func("abc", "ccc") == False, "test #35"
    assert func("abc", "aac") == False, "test #36"
    assert func("abc", "acc") == False, "test #37"
    assert func("abc", "aacc") == False, "test #38"
    assert func("abc", "aaccc") == False, "test #39"
    assert func("abc", "abb") == False, "test #40"
    assert func("abc", "bbc") == False, "test #41"
    assert func("abc", "bbcc") == False, "test #42"
    assert func("abc", "bbccc") == False, "test #43"
    assert func("abc", "bbcccc") == False, "test #44"
    assert func("abc", "bbccccc") == False, "test #45"
    assert func("abc", "bbcccccc") == False, "test #46"
    assert func("abc", "bbccccccc") == False, "test #47"
    assert func("abc", "bbcccccccc") == False, "test #48"
    assert func("abc", "bbccccccccc") == False, "test #49"
    assert func("abc", "bbcccccccccc") == False, "test #50"
    assert func("abc", "bbccccccccccc") == False, "test #51"
    assert func("abc", "bbcccccccccccc") == False, "test #52"
    assert func("abc", "bbccccccccccccc") == False, "test #53"
    assert func("abc", "bbcccccccccccccc") == False, "test #54"
    assert func("abc", "bbccccccccccccccc") == False, "test #55"
    assert func("abc", "bbcccccccccccccccc") == False, "test #56"
    assert func("abc", "bbccccccccccccccccc") == False, "test #57"
    assert func("abc", "bbcccccccccccccccccc") == False, "test #58"
    assert func("abc", "bbccccccccccccccccccc") == False, "test #59"
    assert func("abc", "bbcccccccccccccccccccc") == False, "test #60"
    assert func("abc", "bbccccccccccccccccccccc") == False, "test #61"
    assert func("abc", "bbcccccccccccccccccccccc") == False, "test #62"
    assert func("abc", "bbccccccccccccccccccccccc") == False, "test #63"
    assert func("abc", "bbcccccccccccccccccccccccc") == False, "test #64"
    assert func("abc", "bbccccccccccccccccccccccccc") == False, "test #65"
    assert func("abc", "bbcccccccccccccccccccccccccc") == False, "test #66"
    assert func("abc", "bbccccccccccccccccccccccccccc") == False, "test #67"
    assert func("abc", "bbcccccccccccccccccccccccccccc") == False, "test #68"
    assert func("abc", "bbccccccccccccccccccccccccccccc") == False, "test #69"
    assert func("abc", "bbcccccccccccccccccccccccccccccc") == False, "test #70"
    assert func("abc", "bbccccccccccccccccccccccccccccccc") == False, "test #71"
    assert func("abc", "bbcccccccccccccccccccccccccccccccc") == False, "test #72"
    assert func("abc", "bbccccccccccccccccccccccccccccccccc") == False, "test #73"
    assert func("abc", "bbcccccccccccccccccccccccccccccccccc") == False, "test #74"
    assert func("abc", "bbccccccccccccccccccccccccccccccccccc") == False, "test #75"
    assert func("abc", "bbcccccccccccccccccccccccccccccccccccc") == False, "test #76"
    assert func("abc", "bbccccccccccccccccccccccccccccccccccccc") == False, "test #77"
    assert func("abc", "bbcccccccccccccccccccccccccccccccccccccc") == False, "test #78"
    assert func("abc", "bbccccccccccccccccccccccccccccccccccccccc") == False, "test #79"
    assert func("abc", "bbcccccccccccccccccccccccccccccccccccccccc") == False, "test #80"
    assert func("abc", "bbccccccccccccccccccccccccccccccccccccccccc") == False, "test #81"
    assert func("abc", "bbcccccccccccccccccc
    """
