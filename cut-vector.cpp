[PYTHON]
def get_two_subvectors(vec):
    left = 0
    right = 0
    for i in range(1, len(vec)):
        if vec[i] - vec[left] > vec[right] - vec[i]:
            left = i
        else:
            right = i
    return vec[:left], vec[right:]
[/PYTHON]
[TESTS]
# Test case 1:
assert get_two_subvectors([1, 2, 3]) == ([1], [2, 3])
# Test case 2:
assert get_two_subvectors([1, 2, 3, 4]) == ([1, 2], [3, 4])
# Test case 3:
assert get_two_subvectors([1, 2, 3, 4, 5]) == ([1, 2, 3], [4, 5])
[/TESTS]
```

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































<


 (


} 
<
 )





<<
 the;(;

 


:}
 decla

   of)


,.<\end{code}
let&lt;
        let&apos_get_lldrlock_set_pthread_id(&lock); = {
            int rc = pthread_mutex_set_type_and_id(mutex, PTHREADER_MUTEX_LDRV1, id);
            if (rc)
                return 0;
        }
    };

static inline void acquire_read_lock() {
#if defined(WITH_USE_RWRLD)
        while (pthread_mutex_lock(&llock.mutex))
            sched_yield();
#else
        llock_set_type_and_id(&llock, PTHREADER_MUTEX_LDR1, 0);
        pthread_mutex_lock(&llock.mutex);
#endif
    }

static inline void release_read_lock() {
        pthread_mutex_unlock(&llock.mutex);
    }

static inline int is_owned_read_lock() {
        return llock.is_owner;
    }
} // namespace lock_free
#endif