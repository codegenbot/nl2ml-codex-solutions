#include <vector>
#include <iostream>
#include <string>
#include <cstring>
#include <queue>
#include <stdio.h>
#include <math.h>
#include <map>
#include <set>
#include <stack>
#include <climits>
using namespace std;
































































































/**
Given an array, return the set of items that are duplicates
String[] array = {"Hi", "Hello", "Hey", "Hi", "Hello", "Hey"};
findDuplicates( array );
returns {"Hi", "Hello", "Hey"} */

#include <vector>
#include <iostream>
#include <string>
#include <cstring>
#include <queue>
#include <stdio.h>
#include <math.h>
#include <map>
#include <set>
#include <stack>
#include <climits>
#include <algorithm>
using namespace std;

void duplicate(string arr[], int &size) {
    set<string> ss;
    for(int i=0; i<size; i++) {
        ss.insert(arr[i]);
    }
    vector<string> v;
    set<string>::iterator it = ss.begin();
    while(it != ss.end()) {
        int count = 0;
        for(int i=0; i<size; i++) {
            if(arr[i].compare(*it) == 0) {
                count++;
            }
            if(count > 1) {
                v.push_back(*it);
                break;
            }
        }
        it++;
    }
    for(int i=0; i<v.size(); i++) {
        cout << v[i] << " ";
    }
}
int main() {
    string arr[3] = {"Hello", "Hey", "Hello"};
    duplicate(arr, 3);
    return 0;
}


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































/*
This problem gives 3 strings. The first two represent a cipher, mapping each character in one string to the one at the same index in the other string. The program must apply this cipher to the third string and return the deciphered message.
For example,
input:
abcdefghijklmnopqrstuvwxyz
bcdefghijklmnopqrstuvwxyza
abcdefghijklmnopqrstuvwxyz




output:
defdef
input:
a
a
a

output:
a
input:
j
h
j

output:
h
input:
a
z
a
output:
z

input:
e
l
eeeeeeeeee
output:
llllllllll
*/
int main() {
    string a, b, c;
    cin >> a >> b >> c;
    for(int i=0; i<c.length(); i++) {
        //cout << c[i] << endl;
        int pos = a.find(c[i]);
        if(pos != string::npos) {
            c[i] = b[pos];
        }
    }
    cout << c << endl;
    return 0;
}
