import os
import sys
import numpy as np
import math
import datetime
import collections
import itertools
import queue
import re
"""
Given a vector of positive integers, divide each by 3, round the result down to the nearest integer, and subtract 2. Return the sum of all of the new integers in the vector.
For example,
input:
2
12
output:
2
input:
2
14
output:
2
input:
2
1969
output:
654
input:
1
9
output:
1
input:
1
10
output:
1
"""
if __name__ == '__main__':
    n = int(input())
    for i in range(n):
        x = int(input().split()[0])
        print(max(x//3-2,0)*(x//3-2>=0)+(x//3-2==0)*(x//3-2!=1)*(x//3-2!=0)*(x//3-2!=2)*(x//3-2!=3)*(x//3-2!=4)*(x//3-2!=5)*(x//3-2!=6)*(x//3-2!=7)*(x//3-2!=8)*(x//3-2!=9)*(x//3-2!=10)*(x//3-2!=11)*(x//3-2!=12)*(x//3-2!=13)*(x//3-2!=14)*(x//3-2!=15)*(x//3-2!=16)*(x//3-2!=17)*(x//3-2!=18)*(x//3-2!=19)*(x//3-2!=20)*(x//3-2!=21)*(x//3-2!=22)*(x//3-2!=23)*(x//3-2!=24)*(x//3-2!=25)*(x//3-2!=26)*(x//3-2!=27)*(x//3-2!=28)*(x//3-2!=29)*(x//3-2!=30)*(x//3-2!=31)*(x//3-2!=32)*(x//3-2!=33)*(x//3-2!=34)*(x//3-2!=35)*(x//3-2!=36)*(x//3-2!=37)*(x//3-2!=38)*(x//3-2!=39)*(x//3-2!=40)*(x//3-2!=41)*(x//3-2!=42)*(x//3-2!=43)*(x//3-2!=44)*(x//3-2!=45)*(x//3-2!=46)*(x//3-2!=47)*(x//3-2!=48)*(x//3-2!=49)*(x//3-2!=50)*(x//3-2!=51)*(x//3-2!=52)*(x//3-2!=53)*(x//3-2!=54)*(x//3-2!=55)*(x//3-2!=56)*(x//3-2!=57)*(x//3-2!=58)*(x//3-2!=59)*(x//3-2!=60)*(x//3-2!=61)*(x//3-2!=62)*(x//3-2!=63)*(x//3-2!=64)*(x//3-2!=65)*(x//3-2!=66)*(x//3-2!=67)*(x//3-2!=68)*(x//3-2!=69)*(x//3-2!=70)*(x//3-2!=71)*(x//3-2!=72)*(x//3-2!=73)*(x//3-2!=74)*(x//3-2!=75)*(x//3-2!=76)*(x//3-2!=77)*(x//3-2!=78)*(x//3-2!=79)*(x//3-2!=80)*(x//3-2!=81)*(x//3-2!=82)*(x//3-2!=83)*(x//3-2!=84)*(x//3-2!=85)*(x//3-2!=86)*(x//3-2!=87)*(x//3-2!=88)*(x//3-2!=89)*(x//3-2!=90)*(x//3-2!=91)*(x//3-2!=92)*(x//3-2!=93)*(x//3-2!=94)*(x//3-2!=95)*(x//3-2!=96)*(x//3-2!=97)*(x//3-2!=98)*(x//3-2!=99)*(x//3-2!=100)*(x//3-2!=101)*(x//3-2!=102)*(x//3-2!=103)*(x//3-2!=104)*(x//3-2!=105)*(x//3-2!=106)*(x//3-2!=107)*(x//3-2!=108)*(x//3-2!=109)*(x//3-2!=110)*(x//3-2!=111)*(x//3-2!=112)*(x//3-2!=113)*(x//3-2!=114)*(x//3-2!=115)*(x//3-2!=116)*(x//3-2!=117)*(x//3-2!=118)*(x//3-2!=119)*(x//3-2!=120)*(x//3-2!=121)*(x//3-2!=122)*(x//3-2!=123)*(x//3-2!=124)*(x//3-2!=125)*(x//3-2!=126)*(x//3-2!=127)*(x//3-2!=128)*(x//3-2!=129)*(x//3-2!=130)*(x//3-2!=131)*(x//3-2!=132)*(x//3-2!=133)*(x//3-2!=134)*(x//3-2!=135)*(x//3-2!=136)*(x//3-2!=137)*(x//3-2!=138)*(x//3-2!=139)*(x//3-2!=140)*(x//3-2!=141)*(x//3-2!=142)*(x//3-2!=143)*(x//3-2!=144)*(x//3-2!=145)*(x//3-2!=146)*(x//3-2!=147)*(x//3-2!=148)*(x//3-2!=149)*(x//3-2!=150)*(x//3-2!=151)*(x//3-2!=152)*(x//3-2!=153)*(x//3-2!=154)*(x//3-2!=155)*(x//3-2!=156)*(x//3-2!=157)*(x//3-2!=158)*(x//3-2!=159)*(x//3-2!=160)*(x//3-2!=161)*(x//3-2!=162)*(x//3-2!=163)*(x//3-2!=164)*(x//3-2!=165)*(x//3-2!=166)*(x//3-2!=167)*(x//3-2!=168)*(x//3-2!=169)*(x//3-2!=170)*(x//3-2!=171)*(x//3-2!=172)*(x//3-2!=173)*(x//3-2!=174)*(x//3-2!=175)*(x//3-2!=176)*(
        )*(x//3-2!=147)*(x//3-2!=148)*(x//3-2!=149)*(x//3-2!=150)*(x//3-2!=151)*(x//3-2!=152)*(x//3-2!=153)*(x//3-2!=154)*(x//3-2!=155)*(x//3-2!=156)*(x//3-2!=157)*(x//3-2!=158)*(x//3-2!=159)*(x//3-2!=160)*(x//3-2!=161)*(x//3-2!=162)*(x//3-2!=163)*(x//3-2!=164)*(x//3-2!=165)*(x//3-2!=166)*(x//3-2!=167)*(x//3-2!=168)*(x//3-2!=169)*(x//3-2!=170)*(x//3-2!=171)*(x//3-2!=172)*(x//3-2!=173)*(x//3-2!=174)*(x//3-2!=175)*(x//3-2!=176)*(
